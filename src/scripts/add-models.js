/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ Figma
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 70+ –º–æ–¥–µ–ª–µ–π
 */

const fs = require('fs')
const path = require('path')

// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
const modelTemplate = {
  id: 0,
  name: "",
  age: 0,
  location: "",
  price: 0,
  description: "",
  photos: [
    "/src/assets/images/models/[FOLDER_NAME]/photo1.jpg",
    "/src/assets/images/models/[FOLDER_NAME]/photo2.jpg",
    "/src/assets/images/models/[FOLDER_NAME]/photo3.jpg",
    "/src/assets/images/models/[FOLDER_NAME]/photo4.jpg",
    "/src/assets/images/models/[FOLDER_NAME]/photo5.jpg"
  ],
  services: [],
  languages: ["–†—É—Å—Å–∫–∏–π"],
  available: true,
  height: 0,
  weight: 0,
  bust: 0,
  hair: "",
  eyes: "",
  nationality: "–†—É—Å—Å–∫–∞—è",
  orientation: "–ì–µ—Ç–µ—Ä–æ",
  meetingPlace: "–í—ã–µ–∑–¥",
  smoking: "–ù–µ –∫—É—Ä—é",
  alcohol: "–ò–Ω–æ–≥–¥–∞",
  additionalInfo: "",
  prices: {
    apartment: {
      oneHour: 0,
      twoHours: 0,
      night: 0
    },
    outcall: {
      oneHour: null,
      twoHours: 0,
      night: 0,
      anal: 0
    }
  },
  detailedServices: {
    sex: [],
    toys: false,
    striptease: [],
    massage: [],
    sadoMaso: false,
    mistress: false,
    slave: false,
    games: false,
    lightDomination: false,
    roleplay: []
  },
  views: 0,
  likes: 0,
  addedDate: new Date().toLocaleDateString('ru-RU'),
  verified: false,
  vip: false,
  online: true,
  newThisWeek: false,
  withVideo: false,
  phone: "+790",
  whatsapp: "+790",
  socialMedia: {
    vk: "",
    instagram: ""
  },
  reviews: {
    rating: 0,
    count: 0
  },
  uniqueId: "",
  tags: []
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateUniqueId(name, location, age) {
  const cleanName = name.toLowerCase().replace(/\s+/g, '-')
  const cleanLocation = location.toLowerCase().replace(/\s+/g, '-')
  return `${cleanName}-${cleanLocation}-${age}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–∏
function createModelFolder(folderName) {
  const folderPath = path.join(__dirname, '../assets/images/models', folderName)
  if (!fs.existsSync(folderPath)) {
    fs.mkdirSync(folderPath, { recursive: true })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folderPath}`)
  }
  return folderPath
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
function addModel(modelData) {
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
  const folderName = modelData.uniqueId || generateUniqueId(modelData.name, modelData.location, modelData.age)
  createModelFolder(folderName)
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
  modelData.photos = [
    `/src/assets/images/models/${folderName}/photo1.jpg`,
    `/src/assets/images/models/${folderName}/photo2.jpg`,
    `/src/assets/images/models/${folderName}/photo3.jpg`,
    `/src/assets/images/models/${folderName}/photo4.jpg`,
    `/src/assets/images/models/${folderName}/photo5.jpg`
  ]
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  modelData.uniqueId = folderName
  
  return modelData
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const newModels = [
  {
    name: "–ê–Ω–Ω–∞",
    age: 25,
    location: "–ú–æ—Å–∫–≤–∞",
    price: 8000,
    description: "–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...",
    height: 165,
    weight: 55,
    bust: 3,
    hair: "–ë–ª–æ–Ω–¥–∏–Ω–∫–∞",
    eyes: "–ì–æ–ª—É–±—ã–µ",
    services: ["–°–µ–∫—Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ú–∞—Å—Å–∞–∂"],
    detailedServices: {
      sex: ["–°–µ–∫—Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"],
      massage: ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"],
      toys: false,
      striptease: [],
      sadoMaso: false,
      mistress: false,
      slave: false,
      games: false,
      lightDomination: false,
      roleplay: []
    }
  },
  // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 69 –º–æ–¥–µ–ª–µ–π...
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è models.json
function updateModelsJson(newModels) {
  const modelsPath = path.join(__dirname, '../data/models.json')
  
  try {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
    const existingModels = JSON.parse(fs.readFileSync(modelsPath, 'utf8'))
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    const updatedModels = [...existingModels]
    let nextId = Math.max(...existingModels.map(m => m.id)) + 1
    
    newModels.forEach(modelData => {
      const newModel = { ...modelTemplate, ...modelData, id: nextId++ }
      const processedModel = addModel(newModel)
      updatedModels.push(processedModel)
    })
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(modelsPath, JSON.stringify(updatedModels, null, 2))
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newModels.length} –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π`)
    console.log(`üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: ${updatedModels.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ models.json:', error)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...')
  updateModelsJson(newModels)
}

module.exports = {
  addModel,
  createModelFolder,
  generateUniqueId,
  updateModelsJson
}
